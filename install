#!/usr/bin/env python3

import sys
import os
from os import path
import shutil
import glob
import subprocess as subproc
import argparse
import platform

script_dir = path.dirname(path.realpath(__file__))

osname = platform.system()
arch = platform.uname().machine

if osname == 'Windows':
    home = os.environ.get('USERPROFILE')
else:
    home = os.environ.get('HOME')

py = path.join(script_dir, 'python')
if py not in sys.path:
    sys.path.append(py)

from colour import printc


if osname == 'Linux':
    try:
        r = subproc.run(['lsb_release', '-sc'], stdout=subproc.PIPE)
        distid = r.stdout.decode().strip()
    except FileNotFoundError:
        printc('[ERROR] command lsb_release is not found.', 'r')
        sys.exit(1)


def prompt(msg, default='y'):
    if not isinstance(default, str):
        default = ''
    default = default.lower()

    if default == 'y':
        return input('%s [Y/n]:' % msg).lower() != 'n'
    elif default == 'n':
        return input('%s [y/N]:' % msg).lower() == 'y'
    else:
        while True:
            a = input('%s [y/n]:' % msg).lower()
            if a == 'y':
                return True
            elif a == 'n':
                return False


def set_git_global_config():
    graph = "log --graph --date=format:'%F %T' --pretty='%C(auto)%h [%ad]%d %C(green)%an%C(reset) : %s'"
    configs = [("core.excludesfile", "~/.gitignore_global"),
               ("core.editor", "vim --noplugin"),
               ("user.name", "Kosuke Tahara"),
               ("user.email", "ksk.tahara@gmail.com"),
               ("push.default", "simple"),
               ("alias.graph", graph),
               ("alias.g", graph),
               ("alias.a", "add"),
               ("alias.c", "commit"),
               ("alias.d", "diff"),
               ("alias.s", "status"),
               ("alias.l", "log"),
               ("alias.f", "fetch"),
               ("alias.su", "submodule"),
               ("alias.sup", "submodule update -i"),
               ("alias.ps", "push"),
               ("alias.pl", "pull"),
               ]

    if osname == 'Linux':
        configs.append(("credential.helper", "cache"))

    for k, v in configs:
        subproc.run(['git', 'config', '--global', k, v])


def setup_shell(files=None):
    contents = {'.bashrc': "source $HOME/dotfiles/bashrc\n",
                '.zshrc': "source $HOME/dotfiles/zshrc\n",
                '.zshenv': "source $HOME/dotfiles/zshenv\n",
                '.xprofile': "source $HOME/dotfiles/xprofile\n",
                }
    if files is None:
        files = contents.keys()
    for fn in files:
        p = path.join(home, fn)

        if not path.exists(p):
            print('Writing following contents to %s.' % p)
            print(contents[fn])
            if prompt('OK?'):
                with open(p, 'w') as f:
                    f.write(contents[fn])
            continue

        with open(p) as f:
            if contents[fn] in f.read():
                continue

        print('Appending following contents to %s.' % p)
        print(contents[fn])
        if prompt('OK?'):
            with open(p, 'a') as f:
                f.write(contents[fn])

    if osname == 'Windows':
        return

    if not ('SHELL' in os.environ and os.environ['SHELL'] == '/bin/zsh'):
        if not path.exists("/bin/zsh"):
            printc("[ERROR] Cannot change shell to zsh because it is not installed.", 'r')
            return
        if prompt('Change default shell to /bin/zsh?'):
            subproc.run(['chsh', '-s', '/bin/zsh'])


def install_pip_packages_windows(args):
    r"""install python packages using pip.

    Assuming only Python3 is installed and pip is equivalent to pip3.

    Recommended to add following to user's PATH.
    %LOCALAPPDATA%\Programs\Python\Python3XY\
    %LOCALAPPDATA%\Programs\Python\Python3XY\Scripts
    %LOCALAPPDATA%\Programs\Python\Python3XY\Library\bin

    """

    # install/upgrade pip first
    subproc.run(['python', '-m', 'pip', 'install', '-U', 'pip', 'setuptools'])

    pkgs = [
        # python dev tools
        "virtualenv", "mypy", "ipython",
        "python-lsp-server[all]",  # to use pylsp from vim-lsp.
        "black",
        # tools written in python
        "panflute", "compiledb",
    ]

    subproc.run(['python', '-m', 'pip', 'install', '--user'] + pkgs)


files_windows = [
    (r"_vimrc", r"vimrc"),
    (r"_gvimrc", r"gvimrc"),
    (r".vimrc", r"vimrc"),
    (r".gvimrc", r"gvimrc"),
    (r".fzf", r"apps\fzf"),
    (r".latexmkrc", r"latexmkrc"),
    (r".matplotlib\matplotlibrc", r"python\matplotlibrc"),
    (r".ipython\profile_default\startup\ipython_startup.py", r"python\ipython_startup.py"),
    (r"vimfiles", r"vim"),
    (r".vim", r"vim"),
    (r".minttyrc", r"windows\minttyrc"),
    (r"dotfiles\vim\pack\my\start\fzf", r"apps\fzf"),
]


def unlink_windows():
    for f in files_windows:
        ln = path.join(home, f[0])
        if path.islink(ln):
            os.remove(ln)
            printc("[WARN] removed {}".format(ln), 'y')
        else:
            print("[INFO] {} doesn't exist".format(ln))


def link_windows(args):
    """make directories and symbolic links for windows.

    Note that you should run this script with Administrator privilege.
    Creates hardlinks and junctions if executed without Admin. priv.

    """

    import ctypes

    kdll = ctypes.windll.LoadLibrary("kernel32.dll")
    shdll = ctypes.windll.LoadLibrary("Shell32.dll")

    admin = shdll.IsUserAnAdmin()
    if not admin:
        print("You don't have Administrator priviledge. If you can get it, I recommend to install with it.")
        if not prompt('Install anyway?', 'n'):
            return

    dirs = [
        r".matplotlib",
        r".ipython\profile_default\startup",
        r".local\tmp"
    ]

    printc('[dirs]', 'b')
    for d in dirs:
        dn = path.join(home, d)

        if path.exists(dn):
            print("[INFO] already exists: %s" % dn)
        else:
            os.makedirs(dn)
            print("created dir %s" % dn)

    printc('[links]', 'b')
    for f in files_windows:
        ln = path.join(home, f[0])
        tgt = path.join(home, 'dotfiles', f[1])

        if path.exists(ln):
            print("[INFO] already exists: %s" % ln)
        else:
            isdir = 1 if path.isdir(tgt) else 0
            if admin:
                ret = kdll.CreateSymbolicLinkW(ln, tgt, isdir)
                if ret == 1:
                    printc("created sym link %s" % ln, 'g')
                else:
                    printc("[ERROR] maybe failed to create link %s (ret code: %d)" % (ln, ret), 'r')
                    printc("[ERROR] be sure to run as Administrator", 'r')
            elif not isdir:
                ret = kdll.CreateHardLinkW(ln, tgt, None)
                if ret:
                    printc("created hard link %s" % ln, 'g')
                else:
                    printc("[ERROR] maybe failed to create link %s (ret code: %d)" % (ln, ret), 'r')
            else:
                # create junction to the directory (no win api?)
                subproc.run(['mklink', '/J', ln, tgt], shell=True)
                printc("created junction %s" % ln, 'g')


def main_windows(args):
    if args.uninstall:
        printc('[remove links]', 'r')
        unlink_windows()
        return

    printc('[make dirs and links]', 'b')
    link_windows(args)
    printc('[git global config]', 'b')
    set_git_global_config()
    if args.pip:
        printc('[pip]', 'b')
        install_pip_packages_windows(args)
    printc('[shell]', 'b')
    setup_shell(files=['.bashrc'])


def setup_fzf():
    """setup fzf.

    """

    fzf_install = [path.join(home, '.fzf/install'),
                   '--key-bindings',
                   '--completion',
                   '--no-update-rc',
                   '--no-bash']
    subproc.run(fzf_install)


def setup_vim():
    """setup vim.

    Note:
    On linux desktop, option +clipboard (+X11) turns on with configure --with-features=huge.
    However, configuration of X fails sometimes (which result in -clipboard (-X11)).
    Maybe Ubuntu 18's Wayland-or-X things are problematic.
    Proper build is confirmed after installing vanilla-gnome-desktop and logged in with 'GNOME on Xorg'.
    When you changed X config / situations,
    try following to remove config cache (vim/src/auto/config.cache) and then configure & make again.
    cd ~/dotfiles/apps/vim/src && make distclean

    """

    # Build
    # check commit hash of HEAD
    head = path.join(script_dir, "apps", "vim.HEAD")
    if path.exists(head):
        with open(head) as f:
            hlast = f.readline()
    else:
        hlast = None

    res = subproc.run(['git', 'rev-parse', '--short', 'HEAD'],
                      cwd=path.join(script_dir, "apps", "vim"),
                      stdout=subproc.PIPE)
    hnow = res.stdout.decode()
    if hnow == hlast:
        return

    wd = path.join(script_dir, "apps", "vim", "src")
    log = path.join(script_dir, "apps", "vim.log")
    print("Building vim")
    vim_conf = ['./configure',
                '--prefix={}/.local'.format(home),
                '--with-features=huge',
                '--enable-gui=no',
                #  '--with-x=yes', # seems enabled implicitly.
                '--enable-python3interp',
                '--enable-fail-if-missing',
                ]
    res = subproc.run(vim_conf, cwd=wd, stdout=subproc.PIPE)
    with open(log, "w") as f:
        f.write(res.stdout.decode())
    res = subproc.run(["make", "install"], cwd=wd, stdout=subproc.PIPE)
    with open(log, "a") as f:
        f.write(res.stdout.decode())

    with open(head, 'w') as f:
        f.write(hnow)


def setup_vim_plugins():
    # Generate helptags
    pack = path.join(script_dir, "vim", "pack", "my", "start")
    docs = path.join(pack, "*", "doc")
    # Don't pass many commands to vim like -c helptags p0 -c helptags p1 ...
    # since there's upper limit of accepted number of commands
    # (`man 1 vim` says it's 10, but I choose safer way; do it one-by-one.)
    vim = path.join(home, ".local", "bin", "vim")
    if not os.path.exists(vim):
        return
    for p in glob.glob(docs):
        subproc.run([vim, '-c', 'helptags ' + p, '-c', 'quit'])

    # markdown-preview.nvim
    if not shutil.which("yarn"):
        printc("[WARN] markdown-previw.nvim is not installed because yarn is not found.", "y")
        printc("[WARN] run ./install -n and retry if you need it.", "y")
        return
    mkdp_app = path.join(pack, "markdown-preview.nvim", "app")
    if not os.path.exists(path.join(mkdp_app, "node_modules")):
        subproc.run(["yarn", "install"], cwd=mkdp_app)


def setup_ctags():
    """setup universal-ctags."""

    # Build
    # check commit hash of HEAD
    head = path.join(script_dir, "apps", "ctags.HEAD")
    if path.exists(head):
        with open(head) as f:
            hlast = f.readline()
    else:
        hlast = None

    res = subproc.run(['git', 'rev-parse', '--short', 'HEAD'],
                      cwd=path.join(script_dir, "apps", "ctags"),
                      stdout=subproc.PIPE)
    hnow = res.stdout.decode()

    if hnow == hlast:
        return

    wd = path.join(script_dir, "apps", "ctags")
    log = path.join(script_dir, "apps", "ctags.log")
    print("Building universal-ctags")
    commands = [
        ['./autogen.sh'],
        ['./configure', '--prefix={}/.local'.format(home)],
        ['make'],
        ['make', 'install'],
    ]
    for i, cmd in enumerate(commands):
        res = subproc.run(cmd, cwd=wd, stdout=subproc.PIPE)
        with open(log, "w" if not i else "a") as f:
            f.write(res.stdout.decode())
        if res.returncode != 0:
            return

    with open(head, 'w') as f:
        f.write(hnow)

def install_apt_packages(args):
    def add_ppa_repository(user, repo):
        if not glob.glob("/etc/apt/sources.list.d/{}-ubuntu-{}-*.list".format(user, repo)):
            subproc.run(['sudo',
                         '--preserve-env=http_proxy,https_proxy,ftp_proxy,no_proxy',
                         'apt-add-repository', 'ppa:{}/{}'.format(user, repo)])

    pkgs = [
        "ncurses-term", "silversearcher-ag", "dstat",
        "tree", "curl", "wget",
        "git", "tmux", "zsh", "zsh-doc", "zsh-syntax-highlighting",
        "global", "pandoc", "unison", "p7zip-full",
        "rlwrap", "apt-file", "pax-utils",
        # build tools
        "build-essential", "cmake",
        "devscripts", "pkg-config",
        "autoconf", "libtool",
    ]

    ex_pkgs = {}

    ex_pkgs["vim"] = [
        # I personally use vim built from source.
        # But install apt-pack vim here for root or other users.
        "vim",
        # libs to build vim
        "gettext", "libtinfo-dev", "libacl1-dev", "libgpm-dev", "python3-dev",
        # libs to build universal-ctags
        "python3-docutils", "libseccomp-dev",
        "libjansson-dev", "libyaml-dev", "libxml2-dev",
    ]

    # use clang tools from vim.
    # we have to append version number for old ubuntu distro.
    if distid == "bionic":
        ex_pkgs["vim"].extend(["clangd-9", "clang-format"])
    else:
        ex_pkgs["vim"].extend(["clangd", "clang-format"])

    ex_pkgs["desktop"] = [
        # libs to build vim
        "xorg-dev",  # to enable +clipboard +X11
        # i3wm and basic things to use with that
        "i3", "dunst", "feh",
        "xsel", "xdotool", "xbacklight",
        "ibus-mozc",
        # audio
        "pulseaudio", "pavucontrol", "pasystray",
        # lightdm instead of gdm3
        "lightdm", "lightdm-gtk-greeter", "lightdm-gtk-greeter-settings",
    ]

    # package name has been changed.
    if distid == "bionic":
        ex_pkgs["desktop"].append("rxvt-unicode-256color")
    else:
        ex_pkgs["desktop"].append("rxvt-unicode")

    ex_pkgs["fulldesktop"] = [
        # music
        "mpd", "mpc", "ncmpc",
        # read / write documents
        "texlive-full", "zathura",
        # Microsoft fonts (Arial etc.)
        "ttf-mscorefonts-installer",
        # misc
        "neofetch", "flameshot",
    ]

    ex_pkgs["pip"] = [
        # basic python libs
        "python3-pip", "python3-requests", "python3-venv",
        "python3-numpy", "python3-scipy",
        "python3-matplotlib", "python3-pandas",
        "python3-ipython", "ipython3",
        # libs to build python
        "libssl-dev", "zlib1g-dev",
        "libbz2-dev", "libreadline-dev", "libsqlite3-dev",
        "libncurses5-dev", "xz-utils", "tk-dev",
        "libxml2-dev", "libxmlsec1-dev", "libffi-dev", "liblzma-dev",
    ]

    ex_pkgs["opam"] = [
        "mercurial", "darcs", "bubblewrap", "m4",
        # for ctypes-foreign
        "libffi-dev",
    ]

    ex_pkgs["cargo"] = [
        # for alacritty
        "libfreetype6-dev", "libfontconfig1-dev", "libxcb-xfixes0-dev",
    ]

    for k, l in ex_pkgs.items():
        if getattr(args, k):
            pkgs.extend(l)

    pkgs = list(set(pkgs))

    printc("[INFO] apt pkgs attempting to install", "g")
    printc(" ".join(pkgs), "g")

    res = subproc.run(['dpkg-query', '-W'] + pkgs,
                      stdout=subproc.DEVNULL, stderr=subproc.DEVNULL)
    needs_install = res.returncode
    if not needs_install:
        print("[INFO] all pkgs are already installed.")
        if not args.upgrade:
            return

    if args.preserve_env:
        sudo_apt = [
            'sudo',
            '--preserve-env=http_proxy,https_proxy,ftp_proxy,no_proxy',
            'apt']
    else:
        sudo_apt = ['sudo', 'apt']

    if not args.skip_update:
        subproc.run(sudo_apt + ['update'])

    if args.upgrade:
        subproc.run(sudo_apt + ['upgrade'])
    if needs_install:
        subproc.run(sudo_apt + ['install'] + pkgs)


def install_pip_packages(args):
    """install python packages using pip.

    Because this will install with --user option,
    installed packages will be located in ~/.local.

    """

    # install/upgrade pip first
    subproc.run(['python3', '-m', 'pip', 'install', '--user', '-U', 'pip'])

    pkgs = [
        # python dev tools
        "virtualenv", "mypy", "ipython",
        "python-lsp-server[all]",  # to use pylsp from vim-lsp.
        "black",
        # tools written in python
        "panflute", "compiledb",
    ]

    subproc.run(['python3', '-m', 'pip', 'install', '--user'] + pkgs)


def install_opam_packages(args):
    """install OCaml packages using opam.

    """

    def install_opam(opam, a):
        """install opam itself to ~/.local/bin.

        """

        import requests
        import hashlib
        version = "2.1.2"
        # watch this for hash: https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh
        hashes = {
            "x86_64": "c0657ecbd4dc212587a4da70c5ff0402df95d148867be0e1eb1be8863a2851015f191437c3c99b7c2b153fcaa56cac99169c76ec94c5787750d7a59cd1fbb68b",
            "arm64": "439b4d67c2888058df81b265148a3468b753c14700a8be38d091b76bf2777b5da5e9c8752839a92878cd377dd4bfbd5c3a458e7a26bff73e35056b60591d30f0",
        }

        if path.exists(opam):
            res = subproc.run([opam, "--version"], stdout=subproc.PIPE)
            v = res.stdout.decode().strip()
            if not args.upgrade or v == version:
                return

        name = "opam-{}-{}-linux".format(version, a)
        print("Downloading", name)
        url = "https://github.com/ocaml/opam/releases/download/{}/{}".format(
            version, name)
        res = requests.get(url)
        if hashlib.sha512(res.content).hexdigest() != hashes[a]:
            raise RuntimeError("SHA512 hash of opam binary doesn't match!")
        with open(opam, 'wb') as f:
            f.write(res.content)
        os.chmod(opam, 0o755)

    archs = {"x86_64": "x86_64", "aarch64": "arm64"}

    if arch not in archs:
        printc("Machine arch {} is not supported for now.".format(arch), 'r')
        return

    opam = path.join(home, ".local", "bin", "opam")
    install_opam(opam, archs[arch])

    if not path.exists(path.join(home, '.opam')):
        subproc.run([opam, 'init', '--no-setup', '--enable-shell-hook'])
        printc("[WARN] opam init is done but opam install is skipped. type 'eval $(opam env)' and run ./install -o again.", 'y')
        return

    if not args.skip_update:
        subproc.run([opam, 'update'])
    if args.upgrade:
        subproc.run([opam, 'upgrade'])

    pkgs = [
        # dev tools
        "utop", "merlin", "ocamlformat", "ocaml-lsp-server",
        # build / test tools
        "ocamlfind", "dune", "alcotest",
        # doc tools
        "odoc", "odig", "ocaml-manual",
        # std libs
        "core",
        # misc libs
        "ctypes", "ctypes-foreign", "atdgen",
    ]

    subproc.run([opam, 'install'] + pkgs)


def make_opt_dir():
    opt = path.join(home, 'opt')
    if not os.path.exists(opt):
        os.mkdir(opt)

    return opt


def install_npm_packages(args):
    """install npm packages.

    """

    def install_node(a):
        """install Node.js in ~/opt/node.

        """

        import io
        import tarfile
        import requests
        major, minor, patch = 20, 9, 0
        name = "node-v{}.{}.{}-linux-{}".format(major, minor, patch, a)
        print("Downloading", name)
        url = "https://nodejs.org/dist/v{}.{}.{}/{}.tar.xz".format(
            major, minor, patch, name)
        res = requests.get(url)
        stream = io.BytesIO(res.content)
        with tarfile.open(fileobj=stream, mode='r:xz') as tar:
            tar.extractall(path=path.join(home, 'opt'))
        os.symlink(path.join(home, 'opt', name), node_dir)

    archs = {"x86_64": "x64", "aarch64": "arm64"}

    if arch not in archs:
        printc("Machine arch {} is not supported for now.".format(arch), 'r')
        return

    node_dir = path.join(make_opt_dir(), 'node')
    if not path.exists(node_dir):
        install_node(archs[arch])

    npm = path.join(node_dir, 'bin', 'npm')

    pkgs = ['yarn', 'npm-check-updates',
            'diff-so-fancy', '@marp-team/marp-cli']

    if args.upgrade:
        subproc.run([npm, 'upgrade', '-g'])

    subproc.run([npm, 'install', '-g'] + pkgs)


def install_go_packages(args):
    def install_go(a):
        """install Golang in ~/opt/go.

        """

        import io
        import tarfile
        import requests
        major, minor, patch = 1, 19, 0
        if patch:
            name = "go{}.{}.{}.linux-{}".format(major, minor, patch, a)
        else:
            name = "go{}.{}.linux-{}".format(major, minor, a)
        print("Downloading", name)
        url = "https://dl.google.com/go/{}.tar.gz".format(name)
        res = requests.get(url)
        stream = io.BytesIO(res.content)
        with tarfile.open(fileobj=stream, mode='r:gz') as tar:
            tar.extractall(path=path.join(home, 'opt'))

    archs = {"x86_64": "amd64", "aarch64": "arm64"}

    if arch not in archs:
        printc("Machine arch {} is not supported for now.".format(arch), 'r')
        return

    go_dir = path.join(make_opt_dir(), 'go')
    if not path.exists(go_dir):
        install_go(archs[arch])

    go = path.join(go_dir, 'bin', 'go')

    pkgs = ["github.com/laurent22/massren@latest"]

    subproc.run([go, 'install'] + pkgs)

def install_cargo_packages(args):
    def install_rust():
        """install Rust

        """

        import requests
        url = "https://sh.rustup.rs"
        res = requests.get(url)
        subproc.run(["bash", "-s", "--", "--no-modify-path"], input=res.content)

    cargo_dir = path.join(home, '.cargo')
    if not path.exists(cargo_dir):
        install_rust()

    cargo = path.join(cargo_dir, 'bin', 'cargo')

    pkgs = ['alacritty']

    subproc.run([cargo, 'install'] + pkgs)


def setup_matlab():
    """make desktop entry for MATLAB (~/opt/matlab).

    """

    matlab = path.join(home, "opt", "matlab", "bin", "glnxa64", "MATLAB")
    if not path.exists(matlab):
        return

    entry_contents = """[Desktop Entry]
Terminal=false
Type=Application
Name=MATLAB
Exec={} -desktop
Categories=Control;MATLAB;
""".format(matlab)

    entry_file = path.join(home, ".local", "share",
                           "applications", "matlab.desktop")
    with open(entry_file, 'w') as f:
        f.write(entry_contents)


files_linux = [
    (r".vimrc", r"vimrc"),
    (r".gvimrc", r"gvimrc"),
    (r".vim", r"vim"),
    (r".ideavimrc", r"ideavimrc"),
    (r".inputrc", r"inputrc"),
    (r".toprc", r"toprc"),
    (r".tmux.conf", r"tmux.conf"),
    (r".tmux/plugins", r"tmux/plugins"),
    (r".fzf", r"apps/fzf"),
    # to support windows (cannot symlink inside git repo)
    (r"dotfiles/vim/pack/my/start/fzf", r"apps/fzf"),
    (r".ctags.d", r"ctags.d"),
    (r".clang-format", r"clang-format"),
    (r".gitignore_global", r"gitignore_global"),
    (r".agignore", r"agignore"),
    (r".latexmkrc", r"latexmkrc"),
    (r".ocamlinit", r"ocaml/ocamlinit"),
    (r".utoprc", r"ocaml/utoprc"),
    (r".config/ocamlformat", r"ocaml/ocamlformat"),
    (r".config/.lambda-term-inputrc", r"ocaml/lambda-term-inputrc"),
    (r".config/zathura/zathurarc", r"zathurarc"),
    (r".config/feh/keys", r"feh_keys"),
    (r".config/matplotlib/matplotlibrc", r"python/matplotlibrc"),
    (r".config/alacritty/alacritty.yml", r"alacritty.yml"),
    (r".ipython/profile_default/ipython_config.py", r"python/ipython_config.py"),
    (r".ipython/profile_default/startup/ipython_startup.py", r"python/ipython_startup.py"),
    (r".config/gtk-3.0/settings.ini", r"gnome/gtk3-settings.ini"),
    (r".gtkrc-2.0", r"gnome/gtkrc-2.0"),
    (r".config/i3/config", r"i3/config"),
    (r".config/i3status/config", r"i3/i3status.conf"),
    (r".Xresources", r"Xresources"),
    (r".urxvt/ext/resize-font", r"urxvt/resize-font/resize-font"),
]


def unlink_linux():
    for f in files_linux:
        ln = path.join(home, f[0])
        if path.islink(ln):
            os.remove(ln)
            printc("[WARN] removed {}".format(ln), 'y')
        else:
            print("[INFO] {} doesn't exist".format(ln))


def link_linux():
    dirs = [r".tmux", r".config/matplotlib",
            r".ipython/profile_default/startup", r".local/tmp",
            r".config/gtk-3.0",
            r".config/i3",
            r".config/i3status",
            r".config/zathura",
            r".config/feh",
            r".config/alacritty",
            r".urxvt/ext",
            r".zfunc",
            ]

    printc('[dirs]', 'b')
    for d in dirs:
        dn = path.join(home, d)

        if not path.exists(dn):
            os.makedirs(dn)
            printc("created dir %s" % dn, 'g')

    printc('[links]', 'b')
    for f in files_linux:
        ln = path.join(home, f[0])
        tgt = path.join(home, 'dotfiles', f[1])

        if path.exists(ln):
            if not path.islink(ln):
                printc("[WARN] already exists but is not link: %s" % ln, 'y')
        else:
            os.symlink(tgt, ln)
            printc("created sym link %s" % ln, 'g')


def main_linux_minimum(args):
    """Minimum installation for Linux.

    Intended for use in servers where I cannot sudo.

    """

    if args.uninstall:
        printc('[remove links]', 'r')
        unlink_linux()
        return

    printc('[make dirs and links]', 'b')
    link_linux()
    printc('[git global config]', 'b')
    set_git_global_config()

    printc('[shell]', 'b')
    setup_shell()


def main_linux(args):
    if args.uninstall:
        printc('[remove links]', 'r')
        unlink_linux()
        return

    printc('[make dirs and links]', 'b')
    link_linux()
    printc('[git global config]', 'b')
    set_git_global_config()

    # check absence of zsh to detect whether the install is first time.
    # if so, install apt packages because it's required to setup shell and fzf.
    no_zsh = not path.exists("/bin/zsh")
    if any((no_zsh, args.apt, args.desktop, args.fulldesktop, args.pip, args.opam, args.cargo, args.vim)):
        printc('[apt packages]', 'b')
        install_apt_packages(args)

    # shell and fzf should be after apt (require zsh).
    printc('[shell]', 'b')
    setup_shell()
    printc('[fzf]', 'b')
    setup_fzf()

    # desktop tools
    if args.desktop:
        printc('[desktop]', 'b')
        subproc.run(['./install_linux_desktop'])
    if args.fulldesktop:
        printc('[fulldesktop]', 'b')
        setup_matlab()

    # language package managers
    import __main__
    for pack in ('pip', 'npm', 'go', 'opam', 'cargo'):
        if getattr(args, pack):
            printc('[{} packages]'.format(pack), 'b')
            getattr(__main__, 'install_{}_packages'.format(pack))(args)

    # vim should be the last because
    # - some package managers install vim plugins. (e.g. merlin by opam).
    # - some plugins require tools (yarn for markdown-preview.nvim).
    if args.vim:
        printc('[vim]', 'b')
        setup_vim()
        setup_ctags()
        setup_vim_plugins()


def parse_args():
    parser = argparse.ArgumentParser(description='Install my dotfiles etc.')
    parser.add_argument('--uninstall', action='store_true',
                        help='Uninstall by removing links. Other options are ignored.')
    parser.add_argument('--skip-update', action='store_true',
                        help='Skip updating repos.')
    parser.add_argument('-E', '--preserve-env', action='store_true',
                        help='Preserve proxy-related env vals for sudo.')
    parser.add_argument('-m', '--minimum', action='store_true',
                        help='Perform minimum installation (for servers etc.).')
    parser.add_argument('-U', '--upgrade', action='store_true',
                        help='Upgrade packages etc.')
    parser.add_argument('-v', '--vim', action='store_true',
                        help='Build vim and generate helptags for plugins.')
    parser.add_argument('-A', '--all', action='store_true',
                        help='Install all extra things.')
    parser.add_argument('-a', '--apt', action='store_true',
                        help='Install apt packages.')
    parser.add_argument('-d', '--desktop', action='store_true',
                        help='Install packages, settings and fonts for desktop.')
    parser.add_argument('-f', '--fulldesktop', action='store_true',
                        help='Install packages, settings and fonts for full desktop.')
    parser.add_argument('-p', '--pip', action='store_true',
                        help='Install pip packages.')
    parser.add_argument('-o', '--opam', action='store_true',
                        help='Install opam packages.')
    parser.add_argument('-g', '--go', action='store_true',
                        help='Install go packages.')
    parser.add_argument('-n', '--npm', action='store_true',
                        help='Install npm packages.')
    parser.add_argument('-c', '--cargo', action='store_true',
                        help='Install cargo packages.')

    args = parser.parse_args()
    if args.fulldesktop:
        args.desktop = True
    if args.all:
        for a in ('vim', 'apt', 'desktop', 'fulldesktop', 'pip', 'opam', 'go', 'npm'):
            setattr(args, a, True)

    return args


if __name__ == '__main__':
    args = parse_args()

    if osname == 'Windows':
        main_windows(args)
    elif osname == 'Linux':
        if args.minimum:
            main_linux_minimum(args)
        else:
            main_linux(args)
    else:
        raise NotImplementedError("OS %s is not supported." % osname)
